/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Basket model serializer
 * @export
 * @interface Basket
 */
export interface Basket {
    /**
     *
     * @type {number}
     * @memberof Basket
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof Basket
     */
    'user': number;
    /**
     *
     * @type {string}
     * @memberof Basket
     */
    'basket_items': string;
}
/**
 * BasketItem model serializer
 * @export
 * @interface BasketItem
 */
export interface BasketItem {
    /**
     *
     * @type {number}
     * @memberof BasketItem
     */
    'basket': number;
    /**
     *
     * @type {number}
     * @memberof BasketItem
     */
    'product': number;
    /**
     *
     * @type {number}
     * @memberof BasketItem
     */
    'id': number;
}
/**
 * Serializer for IntegratedSystem model.
 * @export
 * @interface IntegratedSystem
 */
export interface IntegratedSystem {
    /**
     *
     * @type {number}
     * @memberof IntegratedSystem
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof IntegratedSystem
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof IntegratedSystem
     */
    'slug'?: string | null;
    /**
     *
     * @type {string}
     * @memberof IntegratedSystem
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface PaginatedBasketItemList
 */
export interface PaginatedBasketItemList {
    /**
     *
     * @type {number}
     * @memberof PaginatedBasketItemList
     */
    'count'?: number;
    /**
     *
     * @type {string}
     * @memberof PaginatedBasketItemList
     */
    'next'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaginatedBasketItemList
     */
    'previous'?: string | null;
    /**
     *
     * @type {Array<BasketItem>}
     * @memberof PaginatedBasketItemList
     */
    'results'?: Array<BasketItem>;
}
/**
 *
 * @export
 * @interface PaginatedBasketList
 */
export interface PaginatedBasketList {
    /**
     *
     * @type {number}
     * @memberof PaginatedBasketList
     */
    'count'?: number;
    /**
     *
     * @type {string}
     * @memberof PaginatedBasketList
     */
    'next'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaginatedBasketList
     */
    'previous'?: string | null;
    /**
     *
     * @type {Array<Basket>}
     * @memberof PaginatedBasketList
     */
    'results'?: Array<Basket>;
}
/**
 *
 * @export
 * @interface PaginatedIntegratedSystemList
 */
export interface PaginatedIntegratedSystemList {
    /**
     *
     * @type {number}
     * @memberof PaginatedIntegratedSystemList
     */
    'count'?: number;
    /**
     *
     * @type {string}
     * @memberof PaginatedIntegratedSystemList
     */
    'next'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaginatedIntegratedSystemList
     */
    'previous'?: string | null;
    /**
     *
     * @type {Array<IntegratedSystem>}
     * @memberof PaginatedIntegratedSystemList
     */
    'results'?: Array<IntegratedSystem>;
}
/**
 *
 * @export
 * @interface PaginatedProductList
 */
export interface PaginatedProductList {
    /**
     *
     * @type {number}
     * @memberof PaginatedProductList
     */
    'count'?: number;
    /**
     *
     * @type {string}
     * @memberof PaginatedProductList
     */
    'next'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaginatedProductList
     */
    'previous'?: string | null;
    /**
     *
     * @type {Array<Product>}
     * @memberof PaginatedProductList
     */
    'results'?: Array<Product>;
}
/**
 * Serializer for IntegratedSystem model.
 * @export
 * @interface PatchedIntegratedSystem
 */
export interface PatchedIntegratedSystem {
    /**
     *
     * @type {number}
     * @memberof PatchedIntegratedSystem
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof PatchedIntegratedSystem
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedIntegratedSystem
     */
    'slug'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PatchedIntegratedSystem
     */
    'description'?: string;
}
/**
 * Serializer for Product model.
 * @export
 * @interface PatchedProduct
 */
export interface PatchedProduct {
    /**
     *
     * @type {number}
     * @memberof PatchedProduct
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof PatchedProduct
     */
    'deleted_on'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof PatchedProduct
     */
    'deleted_by_cascade'?: boolean;
    /**
     *
     * @type {string}
     * @memberof PatchedProduct
     */
    'created_on'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedProduct
     */
    'updated_on'?: string;
    /**
     * SKU of the product.
     * @type {string}
     * @memberof PatchedProduct
     */
    'sku'?: string;
    /**
     * Short name of the product, displayed in carts/etc.
     * @type {string}
     * @memberof PatchedProduct
     */
    'name'?: string;
    /**
     * Price (decimal to two places)
     * @type {string}
     * @memberof PatchedProduct
     */
    'price'?: string;
    /**
     * Long description of the product.
     * @type {string}
     * @memberof PatchedProduct
     */
    'description'?: string;
    /**
     * System-specific data for the product (in JSON).
     * @type {any}
     * @memberof PatchedProduct
     */
    'system_data'?: any | null;
    /**
     * Owner system of the product.
     * @type {number}
     * @memberof PatchedProduct
     */
    'system'?: number;
}
/**
 * Serializer for Product model.
 * @export
 * @interface Product
 */
export interface Product {
    /**
     *
     * @type {number}
     * @memberof Product
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'deleted_on': string | null;
    /**
     *
     * @type {boolean}
     * @memberof Product
     */
    'deleted_by_cascade': boolean;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'created_on': string;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'updated_on': string;
    /**
     * SKU of the product.
     * @type {string}
     * @memberof Product
     */
    'sku': string;
    /**
     * Short name of the product, displayed in carts/etc.
     * @type {string}
     * @memberof Product
     */
    'name': string;
    /**
     * Price (decimal to two places)
     * @type {string}
     * @memberof Product
     */
    'price': string;
    /**
     * Long description of the product.
     * @type {string}
     * @memberof Product
     */
    'description': string;
    /**
     * System-specific data for the product (in JSON).
     * @type {any}
     * @memberof Product
     */
    'system_data'?: any | null;
    /**
     * Owner system of the product.
     * @type {number}
     * @memberof Product
     */
    'system': number;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Clear the basket for the current user.  Returns:     Response: HTTP response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsClearDestroy: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/payments/baskets/clear/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new basket item from a product for the currently logged in user. Reuse the existing basket object if it exists.  If the checkout flag is set in the POST data, then this will create the basket, then immediately flip the user to the checkout interstitial (which then redirects to the payment gateway).  Args:     system_slug (str): system slug     sku (str): product slug  POST Args:     quantity (int): quantity of the product to add to the basket (defaults to 1)     checkout (bool): redirect to checkout interstitial (defaults to False)  Returns:     Response: HTTP response
         * @param {string} sku
         * @param {string} system_slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsCreateFromProductCreate: async (sku: string, system_slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('apiV0PaymentsBasketsCreateFromProductCreate', 'sku', sku)
            // verify required parameter 'system_slug' is not null or undefined
            assertParamExists('apiV0PaymentsBasketsCreateFromProductCreate', 'system_slug', system_slug)
            const localVarPath = `/api/v0/payments/baskets/create_from_product/{system_slug}/{sku}/`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"system_slug"}}`, encodeURIComponent(String(system_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new basket item.  Args:     request (HttpRequest): HTTP request  Returns:     Response: HTTP response
         * @param {string} basket
         * @param {BasketItem} BasketItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsItemsCreate: async (basket: string, BasketItem: BasketItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'basket' is not null or undefined
            assertParamExists('apiV0PaymentsBasketsItemsCreate', 'basket', basket)
            // verify required parameter 'BasketItem' is not null or undefined
            assertParamExists('apiV0PaymentsBasketsItemsCreate', 'BasketItem', BasketItem)
            const localVarPath = `/api/v0/payments/baskets/{basket}/items/`
                .replace(`{${"basket"}}`, encodeURIComponent(String(basket)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(BasketItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for BasketItem
         * @param {string} basket
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsItemsDestroy: async (basket: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'basket' is not null or undefined
            assertParamExists('apiV0PaymentsBasketsItemsDestroy', 'basket', basket)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV0PaymentsBasketsItemsDestroy', 'id', id)
            const localVarPath = `/api/v0/payments/baskets/{basket}/items/{id}/`
                .replace(`{${"basket"}}`, encodeURIComponent(String(basket)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for BasketItem
         * @param {string} basket
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsItemsList: async (basket: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'basket' is not null or undefined
            assertParamExists('apiV0PaymentsBasketsItemsList', 'basket', basket)
            const localVarPath = `/api/v0/payments/baskets/{basket}/items/`
                .replace(`{${"basket"}}`, encodeURIComponent(String(basket)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for Basket
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/payments/baskets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for Basket
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsRetrieve: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('apiV0PaymentsBasketsRetrieve', 'username', username)
            const localVarPath = `/api/v0/payments/baskets/{username}/`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Handle webhook call from the payment gateway when the user has completed a transaction.  Returns:     - HTTP_200_OK if the Order is found.  Raises:     - Http404 if the Order is not found.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsCheckoutCallbackCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/payments/checkout/callback/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start the checkout process. This assembles the basket items into an Order with Lines for each item, applies the attached basket discounts, and then calls the payment gateway to prepare for payment.  This is expected to be called from within the Ecommerce cart app, not from an integrated system.  Returns:     - JSON payload from the ol-django payment gateway app. The payment       gateway returns data necessary to construct a form that will       ultimately POST to the actual payment processor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsCheckoutStartCheckoutCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/payments/checkout/start_checkout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Clear the basket for the current user.  Returns:     Response: HTTP response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0PaymentsBasketsClearDestroy(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0PaymentsBasketsClearDestroy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new basket item from a product for the currently logged in user. Reuse the existing basket object if it exists.  If the checkout flag is set in the POST data, then this will create the basket, then immediately flip the user to the checkout interstitial (which then redirects to the payment gateway).  Args:     system_slug (str): system slug     sku (str): product slug  POST Args:     quantity (int): quantity of the product to add to the basket (defaults to 1)     checkout (bool): redirect to checkout interstitial (defaults to False)  Returns:     Response: HTTP response
         * @param {string} sku
         * @param {string} system_slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0PaymentsBasketsCreateFromProductCreate(sku: string, system_slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0PaymentsBasketsCreateFromProductCreate(sku, system_slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new basket item.  Args:     request (HttpRequest): HTTP request  Returns:     Response: HTTP response
         * @param {string} basket
         * @param {BasketItem} BasketItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0PaymentsBasketsItemsCreate(basket: string, BasketItem: BasketItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0PaymentsBasketsItemsCreate(basket, BasketItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API view set for BasketItem
         * @param {string} basket
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0PaymentsBasketsItemsDestroy(basket: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0PaymentsBasketsItemsDestroy(basket, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API view set for BasketItem
         * @param {string} basket
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0PaymentsBasketsItemsList(basket: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBasketItemList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0PaymentsBasketsItemsList(basket, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API view set for Basket
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0PaymentsBasketsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBasketList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0PaymentsBasketsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API view set for Basket
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0PaymentsBasketsRetrieve(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Basket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0PaymentsBasketsRetrieve(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Handle webhook call from the payment gateway when the user has completed a transaction.  Returns:     - HTTP_200_OK if the Order is found.  Raises:     - Http404 if the Order is not found.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0PaymentsCheckoutCallbackCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0PaymentsCheckoutCallbackCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Start the checkout process. This assembles the basket items into an Order with Lines for each item, applies the attached basket discounts, and then calls the payment gateway to prepare for payment.  This is expected to be called from within the Ecommerce cart app, not from an integrated system.  Returns:     - JSON payload from the ol-django payment gateway app. The payment       gateway returns data necessary to construct a form that will       ultimately POST to the actual payment processor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0PaymentsCheckoutStartCheckoutCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0PaymentsCheckoutStartCheckoutCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * Clear the basket for the current user.  Returns:     Response: HTTP response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsClearDestroy(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV0PaymentsBasketsClearDestroy(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new basket item from a product for the currently logged in user. Reuse the existing basket object if it exists.  If the checkout flag is set in the POST data, then this will create the basket, then immediately flip the user to the checkout interstitial (which then redirects to the payment gateway).  Args:     system_slug (str): system slug     sku (str): product slug  POST Args:     quantity (int): quantity of the product to add to the basket (defaults to 1)     checkout (bool): redirect to checkout interstitial (defaults to False)  Returns:     Response: HTTP response
         * @param {ApiApiApiV0PaymentsBasketsCreateFromProductCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsCreateFromProductCreate(requestParameters: ApiApiApiV0PaymentsBasketsCreateFromProductCreateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV0PaymentsBasketsCreateFromProductCreate(requestParameters.sku, requestParameters.system_slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new basket item.  Args:     request (HttpRequest): HTTP request  Returns:     Response: HTTP response
         * @param {ApiApiApiV0PaymentsBasketsItemsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsItemsCreate(requestParameters: ApiApiApiV0PaymentsBasketsItemsCreateRequest, options?: AxiosRequestConfig): AxiosPromise<BasketItem> {
            return localVarFp.apiV0PaymentsBasketsItemsCreate(requestParameters.basket, requestParameters.BasketItem, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for BasketItem
         * @param {ApiApiApiV0PaymentsBasketsItemsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsItemsDestroy(requestParameters: ApiApiApiV0PaymentsBasketsItemsDestroyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV0PaymentsBasketsItemsDestroy(requestParameters.basket, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for BasketItem
         * @param {ApiApiApiV0PaymentsBasketsItemsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsItemsList(requestParameters: ApiApiApiV0PaymentsBasketsItemsListRequest, options?: AxiosRequestConfig): AxiosPromise<PaginatedBasketItemList> {
            return localVarFp.apiV0PaymentsBasketsItemsList(requestParameters.basket, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for Basket
         * @param {ApiApiApiV0PaymentsBasketsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsList(requestParameters: ApiApiApiV0PaymentsBasketsListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedBasketList> {
            return localVarFp.apiV0PaymentsBasketsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for Basket
         * @param {ApiApiApiV0PaymentsBasketsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsBasketsRetrieve(requestParameters: ApiApiApiV0PaymentsBasketsRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<Basket> {
            return localVarFp.apiV0PaymentsBasketsRetrieve(requestParameters.username, options).then((request) => request(axios, basePath));
        },
        /**
         * Handle webhook call from the payment gateway when the user has completed a transaction.  Returns:     - HTTP_200_OK if the Order is found.  Raises:     - Http404 if the Order is not found.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsCheckoutCallbackCreate(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV0PaymentsCheckoutCallbackCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Start the checkout process. This assembles the basket items into an Order with Lines for each item, applies the attached basket discounts, and then calls the payment gateway to prepare for payment.  This is expected to be called from within the Ecommerce cart app, not from an integrated system.  Returns:     - JSON payload from the ol-django payment gateway app. The payment       gateway returns data necessary to construct a form that will       ultimately POST to the actual payment processor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PaymentsCheckoutStartCheckoutCreate(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV0PaymentsCheckoutStartCheckoutCreate(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV0PaymentsBasketsCreateFromProductCreate operation in ApiApi.
 * @export
 * @interface ApiApiApiV0PaymentsBasketsCreateFromProductCreateRequest
 */
export interface ApiApiApiV0PaymentsBasketsCreateFromProductCreateRequest {
    /**
     *
     * @type {string}
     * @memberof ApiApiApiV0PaymentsBasketsCreateFromProductCreate
     */
    readonly sku: string

    /**
     *
     * @type {string}
     * @memberof ApiApiApiV0PaymentsBasketsCreateFromProductCreate
     */
    readonly system_slug: string
}

/**
 * Request parameters for apiV0PaymentsBasketsItemsCreate operation in ApiApi.
 * @export
 * @interface ApiApiApiV0PaymentsBasketsItemsCreateRequest
 */
export interface ApiApiApiV0PaymentsBasketsItemsCreateRequest {
    /**
     *
     * @type {string}
     * @memberof ApiApiApiV0PaymentsBasketsItemsCreate
     */
    readonly basket: string

    /**
     *
     * @type {BasketItem}
     * @memberof ApiApiApiV0PaymentsBasketsItemsCreate
     */
    readonly BasketItem: BasketItem
}

/**
 * Request parameters for apiV0PaymentsBasketsItemsDestroy operation in ApiApi.
 * @export
 * @interface ApiApiApiV0PaymentsBasketsItemsDestroyRequest
 */
export interface ApiApiApiV0PaymentsBasketsItemsDestroyRequest {
    /**
     *
     * @type {string}
     * @memberof ApiApiApiV0PaymentsBasketsItemsDestroy
     */
    readonly basket: string

    /**
     *
     * @type {string}
     * @memberof ApiApiApiV0PaymentsBasketsItemsDestroy
     */
    readonly id: string
}

/**
 * Request parameters for apiV0PaymentsBasketsItemsList operation in ApiApi.
 * @export
 * @interface ApiApiApiV0PaymentsBasketsItemsListRequest
 */
export interface ApiApiApiV0PaymentsBasketsItemsListRequest {
    /**
     *
     * @type {string}
     * @memberof ApiApiApiV0PaymentsBasketsItemsList
     */
    readonly basket: string

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ApiApiApiV0PaymentsBasketsItemsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ApiApiApiV0PaymentsBasketsItemsList
     */
    readonly offset?: number
}

/**
 * Request parameters for apiV0PaymentsBasketsList operation in ApiApi.
 * @export
 * @interface ApiApiApiV0PaymentsBasketsListRequest
 */
export interface ApiApiApiV0PaymentsBasketsListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ApiApiApiV0PaymentsBasketsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ApiApiApiV0PaymentsBasketsList
     */
    readonly offset?: number
}

/**
 * Request parameters for apiV0PaymentsBasketsRetrieve operation in ApiApi.
 * @export
 * @interface ApiApiApiV0PaymentsBasketsRetrieveRequest
 */
export interface ApiApiApiV0PaymentsBasketsRetrieveRequest {
    /**
     *
     * @type {string}
     * @memberof ApiApiApiV0PaymentsBasketsRetrieve
     */
    readonly username: string
}

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * Clear the basket for the current user.  Returns:     Response: HTTP response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiV0PaymentsBasketsClearDestroy(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiV0PaymentsBasketsClearDestroy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new basket item from a product for the currently logged in user. Reuse the existing basket object if it exists.  If the checkout flag is set in the POST data, then this will create the basket, then immediately flip the user to the checkout interstitial (which then redirects to the payment gateway).  Args:     system_slug (str): system slug     sku (str): product slug  POST Args:     quantity (int): quantity of the product to add to the basket (defaults to 1)     checkout (bool): redirect to checkout interstitial (defaults to False)  Returns:     Response: HTTP response
     * @param {ApiApiApiV0PaymentsBasketsCreateFromProductCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiV0PaymentsBasketsCreateFromProductCreate(requestParameters: ApiApiApiV0PaymentsBasketsCreateFromProductCreateRequest, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiV0PaymentsBasketsCreateFromProductCreate(requestParameters.sku, requestParameters.system_slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new basket item.  Args:     request (HttpRequest): HTTP request  Returns:     Response: HTTP response
     * @param {ApiApiApiV0PaymentsBasketsItemsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiV0PaymentsBasketsItemsCreate(requestParameters: ApiApiApiV0PaymentsBasketsItemsCreateRequest, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiV0PaymentsBasketsItemsCreate(requestParameters.basket, requestParameters.BasketItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for BasketItem
     * @param {ApiApiApiV0PaymentsBasketsItemsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiV0PaymentsBasketsItemsDestroy(requestParameters: ApiApiApiV0PaymentsBasketsItemsDestroyRequest, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiV0PaymentsBasketsItemsDestroy(requestParameters.basket, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for BasketItem
     * @param {ApiApiApiV0PaymentsBasketsItemsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiV0PaymentsBasketsItemsList(requestParameters: ApiApiApiV0PaymentsBasketsItemsListRequest, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiV0PaymentsBasketsItemsList(requestParameters.basket, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for Basket
     * @param {ApiApiApiV0PaymentsBasketsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiV0PaymentsBasketsList(requestParameters: ApiApiApiV0PaymentsBasketsListRequest = {}, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiV0PaymentsBasketsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for Basket
     * @param {ApiApiApiV0PaymentsBasketsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiV0PaymentsBasketsRetrieve(requestParameters: ApiApiApiV0PaymentsBasketsRetrieveRequest, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiV0PaymentsBasketsRetrieve(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Handle webhook call from the payment gateway when the user has completed a transaction.  Returns:     - HTTP_200_OK if the Order is found.  Raises:     - Http404 if the Order is not found.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiV0PaymentsCheckoutCallbackCreate(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiV0PaymentsCheckoutCallbackCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start the checkout process. This assembles the basket items into an Order with Lines for each item, applies the attached basket discounts, and then calls the payment gateway to prepare for payment.  This is expected to be called from within the Ecommerce cart app, not from an integrated system.  Returns:     - JSON payload from the ol-django payment gateway app. The payment       gateway returns data necessary to construct a form that will       ultimately POST to the actual payment processor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiV0PaymentsCheckoutStartCheckoutCreate(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiV0PaymentsCheckoutStartCheckoutCreate(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IntegratedSystemApi - axios parameter creator
 * @export
 */
export const IntegratedSystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Viewset for IntegratedSystem model.
         * @param {IntegratedSystem} IntegratedSystem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemCreate: async (IntegratedSystem: IntegratedSystem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'IntegratedSystem' is not null or undefined
            assertParamExists('integratedSystemCreate', 'IntegratedSystem', IntegratedSystem)
            const localVarPath = `/integrated_system/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(IntegratedSystem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('integratedSystemDestroy', 'id', id)
            const localVarPath = `/integrated_system/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/integrated_system/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {PatchedIntegratedSystem} [PatchedIntegratedSystem]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemPartialUpdate: async (id: number, PatchedIntegratedSystem?: PatchedIntegratedSystem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('integratedSystemPartialUpdate', 'id', id)
            const localVarPath = `/integrated_system/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedIntegratedSystem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('integratedSystemRetrieve', 'id', id)
            const localVarPath = `/integrated_system/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {IntegratedSystem} IntegratedSystem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemUpdate: async (id: number, IntegratedSystem: IntegratedSystem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('integratedSystemUpdate', 'id', id)
            // verify required parameter 'IntegratedSystem' is not null or undefined
            assertParamExists('integratedSystemUpdate', 'IntegratedSystem', IntegratedSystem)
            const localVarPath = `/integrated_system/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(IntegratedSystem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegratedSystemApi - functional programming interface
 * @export
 */
export const IntegratedSystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntegratedSystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Viewset for IntegratedSystem model.
         * @param {IntegratedSystem} IntegratedSystem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integratedSystemCreate(IntegratedSystem: IntegratedSystem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegratedSystem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integratedSystemCreate(IntegratedSystem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integratedSystemDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integratedSystemDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integratedSystemList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedIntegratedSystemList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integratedSystemList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {PatchedIntegratedSystem} [PatchedIntegratedSystem]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integratedSystemPartialUpdate(id: number, PatchedIntegratedSystem?: PatchedIntegratedSystem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegratedSystem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integratedSystemPartialUpdate(id, PatchedIntegratedSystem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integratedSystemRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegratedSystem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integratedSystemRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {number} id A unique integer value identifying this integrated system.
         * @param {IntegratedSystem} IntegratedSystem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integratedSystemUpdate(id: number, IntegratedSystem: IntegratedSystem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegratedSystem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integratedSystemUpdate(id, IntegratedSystem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IntegratedSystemApi - factory interface
 * @export
 */
export const IntegratedSystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntegratedSystemApiFp(configuration)
    return {
        /**
         * Viewset for IntegratedSystem model.
         * @param {IntegratedSystemApiIntegratedSystemCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemCreate(requestParameters: IntegratedSystemApiIntegratedSystemCreateRequest, options?: AxiosRequestConfig): AxiosPromise<IntegratedSystem> {
            return localVarFp.integratedSystemCreate(requestParameters.IntegratedSystem, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {IntegratedSystemApiIntegratedSystemDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemDestroy(requestParameters: IntegratedSystemApiIntegratedSystemDestroyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.integratedSystemDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {IntegratedSystemApiIntegratedSystemListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemList(requestParameters: IntegratedSystemApiIntegratedSystemListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedIntegratedSystemList> {
            return localVarFp.integratedSystemList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {IntegratedSystemApiIntegratedSystemPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemPartialUpdate(requestParameters: IntegratedSystemApiIntegratedSystemPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<IntegratedSystem> {
            return localVarFp.integratedSystemPartialUpdate(requestParameters.id, requestParameters.PatchedIntegratedSystem, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {IntegratedSystemApiIntegratedSystemRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemRetrieve(requestParameters: IntegratedSystemApiIntegratedSystemRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<IntegratedSystem> {
            return localVarFp.integratedSystemRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for IntegratedSystem model.
         * @param {IntegratedSystemApiIntegratedSystemUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratedSystemUpdate(requestParameters: IntegratedSystemApiIntegratedSystemUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<IntegratedSystem> {
            return localVarFp.integratedSystemUpdate(requestParameters.id, requestParameters.IntegratedSystem, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for integratedSystemCreate operation in IntegratedSystemApi.
 * @export
 * @interface IntegratedSystemApiIntegratedSystemCreateRequest
 */
export interface IntegratedSystemApiIntegratedSystemCreateRequest {
    /**
     *
     * @type {IntegratedSystem}
     * @memberof IntegratedSystemApiIntegratedSystemCreate
     */
    readonly IntegratedSystem: IntegratedSystem
}

/**
 * Request parameters for integratedSystemDestroy operation in IntegratedSystemApi.
 * @export
 * @interface IntegratedSystemApiIntegratedSystemDestroyRequest
 */
export interface IntegratedSystemApiIntegratedSystemDestroyRequest {
    /**
     * A unique integer value identifying this integrated system.
     * @type {number}
     * @memberof IntegratedSystemApiIntegratedSystemDestroy
     */
    readonly id: number
}

/**
 * Request parameters for integratedSystemList operation in IntegratedSystemApi.
 * @export
 * @interface IntegratedSystemApiIntegratedSystemListRequest
 */
export interface IntegratedSystemApiIntegratedSystemListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof IntegratedSystemApiIntegratedSystemList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof IntegratedSystemApiIntegratedSystemList
     */
    readonly offset?: number
}

/**
 * Request parameters for integratedSystemPartialUpdate operation in IntegratedSystemApi.
 * @export
 * @interface IntegratedSystemApiIntegratedSystemPartialUpdateRequest
 */
export interface IntegratedSystemApiIntegratedSystemPartialUpdateRequest {
    /**
     * A unique integer value identifying this integrated system.
     * @type {number}
     * @memberof IntegratedSystemApiIntegratedSystemPartialUpdate
     */
    readonly id: number

    /**
     *
     * @type {PatchedIntegratedSystem}
     * @memberof IntegratedSystemApiIntegratedSystemPartialUpdate
     */
    readonly PatchedIntegratedSystem?: PatchedIntegratedSystem
}

/**
 * Request parameters for integratedSystemRetrieve operation in IntegratedSystemApi.
 * @export
 * @interface IntegratedSystemApiIntegratedSystemRetrieveRequest
 */
export interface IntegratedSystemApiIntegratedSystemRetrieveRequest {
    /**
     * A unique integer value identifying this integrated system.
     * @type {number}
     * @memberof IntegratedSystemApiIntegratedSystemRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for integratedSystemUpdate operation in IntegratedSystemApi.
 * @export
 * @interface IntegratedSystemApiIntegratedSystemUpdateRequest
 */
export interface IntegratedSystemApiIntegratedSystemUpdateRequest {
    /**
     * A unique integer value identifying this integrated system.
     * @type {number}
     * @memberof IntegratedSystemApiIntegratedSystemUpdate
     */
    readonly id: number

    /**
     *
     * @type {IntegratedSystem}
     * @memberof IntegratedSystemApiIntegratedSystemUpdate
     */
    readonly IntegratedSystem: IntegratedSystem
}

/**
 * IntegratedSystemApi - object-oriented interface
 * @export
 * @class IntegratedSystemApi
 * @extends {BaseAPI}
 */
export class IntegratedSystemApi extends BaseAPI {
    /**
     * Viewset for IntegratedSystem model.
     * @param {IntegratedSystemApiIntegratedSystemCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegratedSystemApi
     */
    public integratedSystemCreate(requestParameters: IntegratedSystemApiIntegratedSystemCreateRequest, options?: AxiosRequestConfig) {
        return IntegratedSystemApiFp(this.configuration).integratedSystemCreate(requestParameters.IntegratedSystem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for IntegratedSystem model.
     * @param {IntegratedSystemApiIntegratedSystemDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegratedSystemApi
     */
    public integratedSystemDestroy(requestParameters: IntegratedSystemApiIntegratedSystemDestroyRequest, options?: AxiosRequestConfig) {
        return IntegratedSystemApiFp(this.configuration).integratedSystemDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for IntegratedSystem model.
     * @param {IntegratedSystemApiIntegratedSystemListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegratedSystemApi
     */
    public integratedSystemList(requestParameters: IntegratedSystemApiIntegratedSystemListRequest = {}, options?: AxiosRequestConfig) {
        return IntegratedSystemApiFp(this.configuration).integratedSystemList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for IntegratedSystem model.
     * @param {IntegratedSystemApiIntegratedSystemPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegratedSystemApi
     */
    public integratedSystemPartialUpdate(requestParameters: IntegratedSystemApiIntegratedSystemPartialUpdateRequest, options?: AxiosRequestConfig) {
        return IntegratedSystemApiFp(this.configuration).integratedSystemPartialUpdate(requestParameters.id, requestParameters.PatchedIntegratedSystem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for IntegratedSystem model.
     * @param {IntegratedSystemApiIntegratedSystemRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegratedSystemApi
     */
    public integratedSystemRetrieve(requestParameters: IntegratedSystemApiIntegratedSystemRetrieveRequest, options?: AxiosRequestConfig) {
        return IntegratedSystemApiFp(this.configuration).integratedSystemRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for IntegratedSystem model.
     * @param {IntegratedSystemApiIntegratedSystemUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegratedSystemApi
     */
    public integratedSystemUpdate(requestParameters: IntegratedSystemApiIntegratedSystemUpdateRequest, options?: AxiosRequestConfig) {
        return IntegratedSystemApiFp(this.configuration).integratedSystemUpdate(requestParameters.id, requestParameters.IntegratedSystem, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Viewset for Product model.
         * @param {Product} Product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCreate: async (Product: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'Product' is not null or undefined
            assertParamExists('productCreate', 'Product', Product)
            const localVarPath = `/product/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(Product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productDestroy', 'id', id)
            const localVarPath = `/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [name]
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [system__slug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productList: async (limit?: number, name?: string, offset?: number, system__slug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (system__slug !== undefined) {
                localVarQueryParameter['system__slug'] = system__slug;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {PatchedProduct} [PatchedProduct]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPartialUpdate: async (id: number, PatchedProduct?: PatchedProduct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productPartialUpdate', 'id', id)
            const localVarPath = `/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedProduct, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productRetrieve', 'id', id)
            const localVarPath = `/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {Product} Product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdate: async (id: number, Product: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productUpdate', 'id', id)
            // verify required parameter 'Product' is not null or undefined
            assertParamExists('productUpdate', 'Product', Product)
            const localVarPath = `/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(Product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * Viewset for Product model.
         * @param {Product} Product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCreate(Product: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCreate(Product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for Product model.
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [name]
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [system__slug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productList(limit?: number, name?: string, offset?: number, system__slug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedProductList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productList(limit, name, offset, system__slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {PatchedProduct} [PatchedProduct]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productPartialUpdate(id: number, PatchedProduct?: PatchedProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productPartialUpdate(id, PatchedProduct, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for Product model.
         * @param {number} id A unique integer value identifying this product.
         * @param {Product} Product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productUpdate(id: number, Product: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productUpdate(id, Product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * Viewset for Product model.
         * @param {ProductApiProductCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCreate(requestParameters: ProductApiProductCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.productCreate(requestParameters.Product, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {ProductApiProductDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productDestroy(requestParameters: ProductApiProductDestroyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.productDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {ProductApiProductListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productList(requestParameters: ProductApiProductListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedProductList> {
            return localVarFp.productList(requestParameters.limit, requestParameters.name, requestParameters.offset, requestParameters.system__slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {ProductApiProductPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPartialUpdate(requestParameters: ProductApiProductPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.productPartialUpdate(requestParameters.id, requestParameters.PatchedProduct, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {ProductApiProductRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productRetrieve(requestParameters: ProductApiProductRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.productRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for Product model.
         * @param {ProductApiProductUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdate(requestParameters: ProductApiProductUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.productUpdate(requestParameters.id, requestParameters.Product, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for productCreate operation in ProductApi.
 * @export
 * @interface ProductApiProductCreateRequest
 */
export interface ProductApiProductCreateRequest {
    /**
     *
     * @type {Product}
     * @memberof ProductApiProductCreate
     */
    readonly Product: Product
}

/**
 * Request parameters for productDestroy operation in ProductApi.
 * @export
 * @interface ProductApiProductDestroyRequest
 */
export interface ProductApiProductDestroyRequest {
    /**
     * A unique integer value identifying this product.
     * @type {number}
     * @memberof ProductApiProductDestroy
     */
    readonly id: number
}

/**
 * Request parameters for productList operation in ProductApi.
 * @export
 * @interface ProductApiProductListRequest
 */
export interface ProductApiProductListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ProductApiProductList
     */
    readonly limit?: number

    /**
     *
     * @type {string}
     * @memberof ProductApiProductList
     */
    readonly name?: string

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ProductApiProductList
     */
    readonly offset?: number

    /**
     *
     * @type {string}
     * @memberof ProductApiProductList
     */
    readonly system__slug?: string
}

/**
 * Request parameters for productPartialUpdate operation in ProductApi.
 * @export
 * @interface ProductApiProductPartialUpdateRequest
 */
export interface ProductApiProductPartialUpdateRequest {
    /**
     * A unique integer value identifying this product.
     * @type {number}
     * @memberof ProductApiProductPartialUpdate
     */
    readonly id: number

    /**
     *
     * @type {PatchedProduct}
     * @memberof ProductApiProductPartialUpdate
     */
    readonly PatchedProduct?: PatchedProduct
}

/**
 * Request parameters for productRetrieve operation in ProductApi.
 * @export
 * @interface ProductApiProductRetrieveRequest
 */
export interface ProductApiProductRetrieveRequest {
    /**
     * A unique integer value identifying this product.
     * @type {number}
     * @memberof ProductApiProductRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for productUpdate operation in ProductApi.
 * @export
 * @interface ProductApiProductUpdateRequest
 */
export interface ProductApiProductUpdateRequest {
    /**
     * A unique integer value identifying this product.
     * @type {number}
     * @memberof ProductApiProductUpdate
     */
    readonly id: number

    /**
     *
     * @type {Product}
     * @memberof ProductApiProductUpdate
     */
    readonly Product: Product
}

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * Viewset for Product model.
     * @param {ProductApiProductCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productCreate(requestParameters: ProductApiProductCreateRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productCreate(requestParameters.Product, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {ProductApiProductDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productDestroy(requestParameters: ProductApiProductDestroyRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {ProductApiProductListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productList(requestParameters: ProductApiProductListRequest = {}, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productList(requestParameters.limit, requestParameters.name, requestParameters.offset, requestParameters.system__slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {ProductApiProductPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productPartialUpdate(requestParameters: ProductApiProductPartialUpdateRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productPartialUpdate(requestParameters.id, requestParameters.PatchedProduct, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {ProductApiProductRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productRetrieve(requestParameters: ProductApiProductRetrieveRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for Product model.
     * @param {ProductApiProductUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productUpdate(requestParameters: ProductApiProductUpdateRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productUpdate(requestParameters.id, requestParameters.Product, options).then((request) => request(this.axios, this.basePath));
    }
}
