"""
Django settings for unified_ecommerce project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# pylint:disable=wildcard-import,unused-wildcard-import)
import datetime
import logging
import os
import platform
from pathlib import Path
from urllib.parse import urljoin

import dj_database_url
from django.core.exceptions import ImproperlyConfigured
from mitol.common.envs import get_bool, get_int, get_string, import_settings_modules

from openapi.settings_spectacular import open_spectacular_settings
from unified_ecommerce.envs import get_list_of_str
from unified_ecommerce.sentry import init_sentry
from unified_ecommerce.settings_celery import *  # noqa: F403
from unified_ecommerce.settings_pluggy import *  # noqa: F403

VERSION = "0.0.0"

log = logging.getLogger()

ENVIRONMENT = get_string("MITOL_UE_ENVIRONMENT", "dev")
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# initialize Sentry before doing anything else so we capture any config errors
SENTRY_DSN = get_string("SENTRY_DSN", "")
SENTRY_LOG_LEVEL = get_string("SENTRY_LOG_LEVEL", "ERROR")
init_sentry(
    dsn=SENTRY_DSN, environment=ENVIRONMENT, version=VERSION, log_level=SENTRY_LOG_LEVEL
)

BASE_DIR = os.path.dirname(  # noqa: PTH120
    os.path.dirname(os.path.abspath(__file__))  # noqa: PTH100, PTH120
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_string("SECRET_KEY", "terribly_unsafe_default_secret_key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_bool(name="DEBUG", default=False)

ALLOWED_HOSTS = ["*"]

SECURE_SSL_REDIRECT = get_bool("MITOL_UE_SECURE_SSL_REDIRECT", True)  # noqa: FBT003

SITE_ID = 1
SITE_BASE_URL = get_string("MITOL_UE_BASE_URL", None)
if not SITE_BASE_URL:
    msg = "MITOL_UE_BASE_URL is not set"
    raise ImproperlyConfigured(msg)
MITOL_UE_TITLE = get_string("MITOL_UE_TITLE", "MIT Ecommerce")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "server_status",
    "rest_framework",
    "corsheaders",
    # "webpack_loader",
    "anymail",
    "hijack",
    "hijack.contrib.admin",
    "guardian",
    "imagekit",
    "django_json_widget",
    "django_filters",
    "drf_spectacular",
    "safedelete",
    "reversion",
    "oauth2_provider",
    "mitol.mail.apps.MailApp",
    "django_countries",
    # Application modules
    "unified_ecommerce",
    "authentication",
    "system_meta",
    "payments",
    "cart",
    "mitol.payment_gateway.apps.PaymentGatewayApp",
    "openapi",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "unified_ecommerce.middleware.ApisixUserMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "hijack.middleware.HijackUserMiddleware",
]

# CORS
CORS_ALLOWED_ORIGINS = get_list_of_str("CORS_ALLOWED_ORIGINS", [])
CORS_ALLOWED_ORIGIN_REGEXES = get_list_of_str("CORS_ALLOWED_ORIGIN_REGEXES", [])
CORS_ALLOW_CREDENTIALS = True

# enable the nplusone profiler only in debug mode
if DEBUG:
    INSTALLED_APPS += ("nplusone.ext.django",)
    MIDDLEWARE += ("nplusone.ext.django.NPlusOneMiddleware",)

SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"

LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "/login"
LOGIN_ERROR_URL = "/login"
LOGOUT_URL = "/logout"
LOGOUT_REDIRECT_URL = "/"

ROOT_URLCONF = "unified_ecommerce.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [Path(BASE_DIR) / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
            ],
        },
    },
]
MITOL_MAIL_MESSAGE_CLASSES = ["payments.messages.SuccessfulOrderPaymentMessage"]

WSGI_APPLICATION = "unified_ecommerce.wsgi.application"

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
# Uses DATABASE_URL to configure with sqlite default:
# For URL structure:
# https://github.com/kennethreitz/dj-database-url
DEFAULT_DATABASE_CONFIG = dj_database_url.parse(
    get_string(
        "DATABASE_URL",
        "sqlite:///{}".format(os.path.join(BASE_DIR, "db.sqlite3")),  # noqa: PTH118
    )
)
DEFAULT_DATABASE_CONFIG["DISABLE_SERVER_SIDE_CURSORS"] = get_bool(
    "MITOL_UE_DB_DISABLE_SS_CURSORS",
    True,  # noqa: FBT003
)
DEFAULT_DATABASE_CONFIG["CONN_MAX_AGE"] = get_int("MITOL_UE_DB_CONN_MAX_AGE", 0)

if get_bool("MITOL_UE_DB_DISABLE_SSL", False):  # noqa: FBT003
    DEFAULT_DATABASE_CONFIG["OPTIONS"] = {}
else:
    DEFAULT_DATABASE_CONFIG["OPTIONS"] = {"sslmode": "require"}

DATABASES = {"default": DEFAULT_DATABASE_CONFIG}

# Safe delete fields
# Note field name is changed from default for consistency with the other timestamp
# fields.

SAFE_DELETE_INTERPRET_UNDELETED_OBJECTS_AS_CREATED = True
SAFE_DELETE_FIELD_NAME = "deleted_on"

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTHENTICATION_BACKENDS = [
    # "authentication.backends.ol_open_id_connect.OlOpenIdConnectAuth",
    # the following needs to stay here to allow login of local users
    "django.contrib.auth.backends.ModelBackend",
    "guardian.backends.ObjectPermissionBackend",
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

# Serve static files with dj-static
STATIC_URL = "/static/"
CLOUDFRONT_DIST = get_string("CLOUDFRONT_DIST", None)
if CLOUDFRONT_DIST:
    STATIC_URL = urljoin(f"https://{CLOUDFRONT_DIST}.cloudfront.net", STATIC_URL)

STATIC_ROOT = "staticfiles"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]  # noqa: PTH118

# Important to define this so DEBUG works properly
INTERNAL_IPS = (get_string("HOST_IP", "127.0.0.1"),)

# Configure e-mail settings
EMAIL_BACKEND = get_string(
    "MITOL_UE_EMAIL_BACKEND", "anymail.backends.mailgun.EmailBackend"
)
EMAIL_HOST = get_string("MITOL_UE_EMAIL_HOST", "localhost")
EMAIL_PORT = get_int("MITOL_UE_EMAIL_PORT", 25)
EMAIL_HOST_USER = get_string("MITOL_UE_EMAIL_USER", "")
EMAIL_HOST_PASSWORD = get_string("MITOL_UE_EMAIL_PASSWORD", "")
EMAIL_USE_TLS = get_bool("MITOL_UE_EMAIL_TLS", False)  # noqa: FBT003
EMAIL_SUPPORT = get_string("MITOL_UE_SUPPORT_EMAIL", "support@example.com")
DEFAULT_FROM_EMAIL = get_string("MITOL_UE_FROM_EMAIL", "webmaster@localhost")

MAILGUN_SENDER_DOMAIN = get_string("MAILGUN_SENDER_DOMAIN", None)
MAILGUN_KEY = get_string("MAILGUN_KEY", None)
MAILGUN_RECIPIENT_OVERRIDE = get_string("MAILGUN_RECIPIENT_OVERRIDE", None)
MAILGUN_FROM_EMAIL = get_string("MITOL_UE_FROM_EMAIL", "no-reply@example.com")
MAILGUN_BCC_TO_EMAIL = get_string("MITOL_UE_BCC_EMAIL", None)

# mitol-django-mail
MITOL_MAIL_FROM_EMAIL = MAILGUN_FROM_EMAIL
MITOL_MAIL_RECIPIENT_OVERRIDE = MAILGUN_RECIPIENT_OVERRIDE
MITOL_MAIL_FORMAT_RECIPIENT_FUNC = "payments.mail_api.format_recipient"
MITOL_MAIL_ENABLE_EMAIL_DEBUGGER = get_bool(  # NOTE: this will override the legacy mail debugger defined in this project  # noqa: E501
    name="MITOL_MAIL_ENABLE_EMAIL_DEBUGGER",
    default=DEBUG,
)

ANYMAIL = {
    "MAILGUN_API_KEY": MAILGUN_KEY,
    "MAILGUN_SENDER_DOMAIN": MAILGUN_SENDER_DOMAIN,
}
# e-mail configurable admins
ADMIN_EMAIL = get_string("MITOL_UE_ADMIN_EMAIL", "")
ADMINS = (("Admins", ADMIN_EMAIL),) if ADMIN_EMAIL != "" else ()

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging configuration
LOG_LEVEL = get_string("MITOL_UE_LOG_LEVEL", "INFO")
DJANGO_LOG_LEVEL = get_string("DJANGO_LOG_LEVEL", "INFO")
OS_LOG_LEVEL = get_string("OS_LOG_LEVEL", "INFO")

# For logging to a remote syslog host
LOG_HOST = get_string("MITOL_UE_LOG_HOST", "localhost")
LOG_HOST_PORT = get_int("MITOL_UE_LOG_HOST_PORT", 514)

HOSTNAME = platform.node().split(".")[0]

# nplusone profiler logger configuration
NPLUSONE_LOGGER = logging.getLogger("nplusone")
NPLUSONE_LOG_LEVEL = logging.ERROR

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {"require_debug_false": {"()": "django.utils.log.RequireDebugFalse"}},
    "formatters": {
        "verbose": {
            "format": (
                "[%(asctime)s] %(levelname)s %(process)d [%(name)s] "
                "%(filename)s:%(lineno)d - "
                f"[{HOSTNAME}] - %(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
        }
    },
    "handlers": {
        "console": {
            "level": LOG_LEVEL,
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "syslog": {
            "level": LOG_LEVEL,
            "class": "logging.handlers.SysLogHandler",
            "facility": "local7",
            "formatter": "verbose",
            "address": (LOG_HOST, LOG_HOST_PORT),
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "loggers": {
        "django": {
            "propagate": True,
            "level": DJANGO_LOG_LEVEL,
            "handlers": ["console", "syslog"],
        },
        "django.request": {
            "handlers": ["mail_admins"],
            "level": DJANGO_LOG_LEVEL,
            "propagate": True,
        },
        "opensearch": {"level": OS_LOG_LEVEL},
        "nplusone": {"handlers": ["console"], "level": "ERROR"},
        "boto3": {"handlers": ["console"], "level": "ERROR"},
    },
    "root": {"handlers": ["console", "syslog"], "level": LOG_LEVEL},
}

STATUS_TOKEN = get_string("STATUS_TOKEN", "")
HEALTH_CHECK = ["CELERY", "REDIS", "POSTGRES"]

MEDIA_ROOT = get_string("MEDIA_ROOT", "/var/media/")
MEDIA_URL = "/media/"
MITOL_UE_USE_S3 = get_bool("MITOL_UE_USE_S3", False)  # noqa: FBT003
AWS_ACCESS_KEY_ID = get_string("AWS_ACCESS_KEY_ID", False)  # noqa: FBT003
AWS_SECRET_ACCESS_KEY = get_string("AWS_SECRET_ACCESS_KEY", False)  # noqa: FBT003
AWS_STORAGE_BUCKET_NAME = get_string("AWS_STORAGE_BUCKET_NAME", False)  # noqa: FBT003
AWS_QUERYSTRING_AUTH = get_string("AWS_QUERYSTRING_AUTH", False)  # noqa: FBT003
# Provide nice validation of the configuration
if MITOL_UE_USE_S3 and (
    not AWS_ACCESS_KEY_ID or not AWS_SECRET_ACCESS_KEY or not AWS_STORAGE_BUCKET_NAME
):
    msg = "You have enabled S3 support, but are missing one of AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, or AWS_STORAGE_BUCKET_NAME"  # noqa: E501
    raise ImproperlyConfigured(msg)
if MITOL_UE_USE_S3:
    # Configure Django Storages to use Cloudfront distribution for S3 assets
    if CLOUDFRONT_DIST:
        AWS_S3_CUSTOM_DOMAIN = f"{CLOUDFRONT_DIST}.cloudfront.net"
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_DEFAULT_ACL = "public-read"

# django cache back-ends
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "local-in-memory-cache",
    },
    "external_assets": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "external_asset_cache",
    },
    "redis": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": CELERY_BROKER_URL,  # noqa: F405
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
    },
}

# JWT authentication settings
MITOL_UE_JWT_SECRET = get_string(
    "MITOL_UE_JWT_SECRET", "terribly_unsafe_default_jwt_secret_key"
)

MITOL_UE_COOKIE_NAME = get_string("MITOL_UE_COOKIE_NAME", None)
if not MITOL_UE_COOKIE_NAME:
    msg = "MITOL_UE_COOKIE_NAME is not set"
    raise ImproperlyConfigured(msg)
MITOL_UE_COOKIE_DOMAIN = get_string("MITOL_UE_COOKIE_DOMAIN", None)
if not MITOL_UE_COOKIE_DOMAIN:
    msg = "MITOL_UE_COOKIE_DOMAIN is not set"
    raise ImproperlyConfigured(msg)

MITOL_UE_UNSUBSCRIBE_TOKEN_MAX_AGE_SECONDS = get_int(
    "MITOL_UE_UNSUBSCRIBE_TOKEN_MAX_AGE_SECONDS",
    60 * 60 * 24 * 7,  # 7 days
)

MITOL_MAIL_REPLY_TO_ADDRESS = get_string(
    name="MITOL_MAIL_REPLY_TO_ADDRESS",
    default="webmaster@localhost.com",
)

SITE_NAME = get_string(
    name="SITE_NAME",
    default="Unified Ecommerce",
)

JWT_AUTH = {
    "JWT_SECRET_KEY": MITOL_UE_JWT_SECRET,
    "JWT_VERIFY": True,
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_EXPIRATION_DELTA": datetime.timedelta(seconds=60 * 60),
    "JWT_ALLOW_REFRESH": True,
    "JWT_REFRESH_EXPIRATION_DELTA": datetime.timedelta(days=7),
    "JWT_AUTH_COOKIE": MITOL_UE_COOKIE_NAME,
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
}

# django debug toolbar only in debug mode
if DEBUG:
    INSTALLED_APPS += ("debug_toolbar",)
    # it needs to be enabled before other middlewares
    MIDDLEWARE = ("debug_toolbar.middleware.DebugToolbarMiddleware", *MIDDLEWARE)

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "unified_ecommerce.authentication.IgnoreExpiredJwtAuthentication",
    ),
    "PAGE_SIZE": 10,
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "EXCEPTION_HANDLER": "unified_ecommerce.exceptions.api_exception_handler",
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "TEST_REQUEST_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.MultiPartRenderer",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "ORDERING_PARAM": "sortby",
    "ALLOWED_VERSIONS": [
        "v0",
    ],
}

USE_X_FORWARDED_PORT = get_bool("USE_X_FORWARDED_PORT", False)  # noqa: FBT003
USE_X_FORWARDED_HOST = get_bool("USE_X_FORWARDED_HOST", False)  # noqa: FBT003

# Hijack
HIJACK_ALLOW_GET_REQUESTS = True
HIJACK_LOGOUT_REDIRECT_URL = "/admin/auth/user"

# Guardian
# disable the anonymous user creation
ANONYMOUS_USER_NAME = None

if DEBUG:
    # allow for all IPs to be routable, including localhost, for testing
    IPWARE_PRIVATE_IP_PREFIX = ()

# drf extension settings
DRF_NESTED_PARENT_LOOKUP_PREFIX = get_string("DRF_NESTED_PARENT_LOOKUP_PREFIX", "")
REST_FRAMEWORK_EXTENSIONS = {
    "DEFAULT_PARENT_LOOKUP_KWARG_NAME_PREFIX": DRF_NESTED_PARENT_LOOKUP_PREFIX
}

# APISIX middleware settings
APISIX_USERDATA_MAP = {
    "auth_user": {
        "email": "email",
        "preferred_username": "sub",
        "given_name": "given_name",
        "family_name": "family_name",
    },
    "authentication_userprofile": {
        "country_code": None,
    },
}

# ecommerce settings
MITOL_UE_REFERENCE_NUMBER_PREFIX = get_string(
    "MITOL_UE_REFERENCE_NUMBER_PREFIX", "mitol-"
)
MITOL_UE_PAYMENT_INTERSTITIAL_DEBUG = get_bool(
    name="MITOL_UE_PAYMENT_INTERSTITIAL_DEBUG", default=DEBUG
)
MITOL_UE_WEBHOOK_RETRY_COOLDOWN = get_int("MITOL_UE_WEBHOOK_RETRY_COOLDOWN", 60)
MITOL_UE_WEBHOOK_RETRY_MAX = get_int("MITOL_UE_WEBHOOK_RETRY_MAX", 4)

MITOL_UE_FORCE_PROFILE_COUNTRY = get_bool(
    name="MITOL_UE_FORCE_PROFILE_COUNTRY", default=False
)

import_settings_modules("mitol.payment_gateway.settings.cybersource")

# Keycloak API settings
KEYCLOAK_ADMIN_CLIENT_ID = get_string("KEYCLOAK_ADMIN_CLIENT_ID", False)  # noqa: FBT003
KEYCLOAK_ADMIN_CLIENT_SECRET = get_string("KEYCLOAK_ADMIN_CLIENT_SECRET", False)  # noqa: FBT003
KEYCLOAK_REALM = get_string("KEYCLOAK_REALM", False)  # noqa: FBT003
KEYCLOAK_ADMIN_URL = get_string("KEYCLOAK_ADMIN_URL", False)  # noqa: FBT003
KEYCLOAK_ADMIN_SECURE = get_bool("KEYCLOAK_ADMIN_SECURE", True)  # noqa: FBT003

SPECTACULAR_SETTINGS = open_spectacular_settings
