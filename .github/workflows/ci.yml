name: CI
on: [push]
jobs:
  python-tests:
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      db:
        # Docker Hub image
        image: postgres:12.11
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_DB: postgres
        ports:
          - 5432:5432

      redis:
        image: redis:5.0.14
        ports:
          - 6379:6379

      elastic:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
        env:
          network.host: "0.0.0.0"
          http.cors.enabled: "true"
          http.cors.allow-origin: "*"
          http.max_content_length: "10mb"
          rest.action.multi.allow_explicit_index: "false"
          ES_JAVA_OPTS: "-Xms1024m -Xmx1024m"
          discovery.type: "single-node"
        ports:
          - 9200:9200

    steps:
      - uses: actions/checkout@v3

      - name: update apt
        run: sudo apt-get update -y

      - name: Apt install
        run: cat Aptfile | sudo xargs apt-get install

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11.5"
          cache: "poetry"

      - name: Validate lockfile
        run: poetry lock --check

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Lint
        run: poetry run ruff --extend-ignore=D1 $(git ls-files '*.py')
      - name: Create test local state
        run: ./scripts/test/stub-data.sh
      - name: Tests
        run: |
          export MEDIA_ROOT="$(mktemp -d)"
          ./scripts/test/python_tests.sh
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres # pragma: allowlist secret
          MITOPEN_SECURE_SSL_REDIRECT: "False"
          MITOPEN_DB_DISABLE_SSL: "True"
          MITOPEN_FEATURES_DEFAULT: "True"
          OPENSEARCH_URL: localhost:9200
          CELERY_TASK_ALWAYS_EAGER: "True"
          CELERY_BROKER_URL: redis://localhost:6379/4
          CELERY_RESULT_BACKEND: redis://localhost:6379/4
          TIKA_CLIENT_ONLY: "True"
          MITOPEN_BASE_URL: http://localhost:8063/
          MAILGUN_KEY: fake_mailgun_key
          MAILGUN_SENDER_DOMAIN: other.fake.site
          OPENSEARCH_INDEX: testindex
          INDEXING_API_USERNAME: mitodl
          MITOPEN_COOKIE_DOMAIN: localhost
          MITOPEN_COOKIE_NAME: cookie_monster

      - name: Upload coverage to CodeCov
        uses: codecov/codecov-action@v3.1.4
        with:
          file: ./coverage.xml

  javascript-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.18.2"
          cache: "yarn"

      - name: Setup environment
        run: sudo apt-get install libelf1

      - name: Install dependencies
        run: yarn install --immutable

      - name: Webpack build
        run: yarn run build

      - name: Lints
        run: yarn run lint-check

      - name: Scss lint
        run: yarn run scss-lint

      - name: Typecheck
        run: yarn run typecheck

      - name: Get number of CPU cores
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v1

      - name: Tests
        run: yarn test --max-workers ${{ steps.cpu-cores.outputs.count }}
        env:
          CODECOV: true
          NODE_ENV: test

      - name: Upload coverage to CodeCov
        uses: codecov/codecov-action@v3.1.4
        with:
          file: coverage/lcov.info

  openapi-generated-client-check:
    # This job checks that the output of openapi-generator-typescript-axios that
    # is checked into version control is up-to-date.
    env:
      OPENAPI_SCHEMA: ./openapi.yaml
      GENERATOR_IGNORE_FILE: ./frontends/api/.openapi-generator-ignore
      GENERATOR_OUTPUT_DIR_CI: ./frontends/api/tmp/generated
      GENERATOR_OUTPUT_DIR_VC: ./frontends/api/src/generated
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.18.2"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Generate Fresh API Client
        uses: openapi-generators/openapitools-generator-action@v1
        with:
          generator: typescript-axios
          openapi-file: ./openapi.yaml
          generator-tag: v6.6.0
          command-args: |
            --output $GENERATOR_OUTPUT_DIR_CI \
            --ignore-file-override $GENERATOR_IGNORE_FILE \
            -c scripts/openapi-configs/typescript-axios.yaml
      - name: Format freshly generated client
        run: npx prettier $GENERATOR_OUTPUT_DIR_CI/**/*.ts --no-semi --write
      - name: Check VC client is up-to-date
        run: |
          diff $GENERATOR_OUTPUT_DIR_CI $GENERATOR_OUTPUT_DIR_VC \
          || { echo "OpenAPI spec is out of date. Please regenerate via ./scripts/generate_openapi.sh"; exit 1; }
